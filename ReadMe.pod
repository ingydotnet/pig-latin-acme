=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.31.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Name

Pig::Latin - Convert English to Pig Latin

=for html
<a href="https://travis-ci.org/ingydotnet/pig-latin-acme"><img src="https://travis-ci.org/ingydotnet/pig-latin-acme.png" alt="pig-latin-acme"></a>

=head1 Synopsis

    use Pig::Latin
    say Pig::Latin('I love Pig Latin').convert

=head1 Description

This is an Acmeist version of a Pig Latin translation framework written in
many programming languages. The languages chosen are OO in nature (or can fake
it easily). The code is written as literal porting translations and does not
attempt to show off any special features of a language.

One of the implementations is in CafeScript, a language that is an evolution
of CoffeeScript, but intends to generate equivalents in all the other
languages (not just JavaScript).

The overall goal of this project, is to make a proof of concept CafeScript
that can generate equivalents in all the target languages and also publish
finished packages to their respective CPAN (RubyGems, PyPI, NPM, etc)
equivalents.

This involves not only code generation, but also test, doc and packaging tool
generation.

=head1 Language Features Exercised

Pig Latin translation was chosen because it is simple but not completely
trivial. The code exercises these language features:

=over

=item * Libraries

=over

=item * loadI<use>require

=item * LIB path manipulation

=back

=item * Classes

=item * Methods

=item * Construction

=item * Attributes

=item * Declaration

=item * Assignment

=item * Method calls

=item * Looping / Iteration

=item * Lambda Functions

=item * If/Else conditionals

=over

=item * Ternary assignment

=back

=item * Strings

=over

=item * String Standard Methods

=item * Substrings

=item * Split

=item * Concatentation

=item * Interpolation

=back

=item * Arrays

=over

=item * Array Indexing

=item * Array Standard Methods

=back

=item * Regular expression usage

=over

=item * Captures

=back

=item * Exceptions

=back

This seems like a decent subset to get a ball rolling.

=head1 Languages Supported So Far

=over

=item * Bash

=item * C++

=item * CafeScript

=item * CoffeeScript

=item * Go

=item * Lingy

=item * LiveScript

=item * Node.js

=item * Perl 5

=item * Perl 5 w/ Inline::CPP

=item * Perl 6

=item * PHP

=item * Python (2)

=item * Python 3

=item * Racket

=item * Ruby

=item * Scala

=item * Tcl

=back

=head1 Languages Desired (Pull Requests please!)

=over

=item * C#

=item * Clojure

=item * D

=item * Dylan

=item * Eiffel

=item * Erlang

=item * Groovy

=item * Haskell

=item * Java

=item * Lua

=item * Objective C

=item * Processing

=item * Prolog

=item * Scratch

=item * Smalltalk

=back

=head1 Strategy

=over

=item * Hand port the algorithm to 15 - 20 languages

=over

=item * With working tests

=back

=item * Port the CafeScript to a YAML AST

=item * Generate the target languages

=over

=item * Pass tests

=back

=item * Write a CafeScript compiler that can produce the YAML AST

=item * Make TestML suite pass in all languages

=item * Generate the language specific subdirs for packaging and release

=item * Automate everything from top level Makefile

=back

=head1 Author

Written by:

=over

=item * Ingy döt Net <ingy@ingy.net>

=item * David Oswald <davido@cpan.org>

=back

=head1 Copyright & License

The MIT License (MIT)

Copyright 2014. Ingy döt Net.

=cut
