=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.31.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 Name

Pig::Latin - Acmeist English to Pig Latin Converter

=for html
<a href="https://travis-ci.org/ingydotnet/pig-latin-acme"><img src="https://travis-ci.org/ingydotnet/pig-latin-acme.png" alt="pig-latin-acme"></a>

=head1 Synopsis

    use Pig::Latin
    say Pig::Latin('I love Pig Latin').convert

Run this command to watch this work in 15+ languages:

    make test

=head1 Description

This is an Acmeist version of a English to Pig Latin conversion framework
written in many programming languages. The languages chosen are OO in nature
(or can fake it easily). The code is written as literal porting translations
and does not attempt to show off any special features of a language.

I<< The goal of this is to generate a B<module> in many languages from one
source. >>

One of the implementations is in Lingy, a I<syntaxless> language that is
simply an AST data structure that contains all the data necessary to generate
equivalent code in many other languages. In leiu of a syntax, I use YAML to
directly encode the data.

Another one of the implementations is in CafeScript, a language that is an
evolution of CoffeeScript, but compiles to the Lingy AST (and thus to all the
backend languages).

The overall goal of this project, is to make a proof of concept CafeScript
that can generate equivalents in all the target languages and also publish
finished packages to their respective CPAN (RubyGems, PyPI, NPM, etc)
equivalents.

This involves not only code generation, but also test, doc and packaging tool
generation.

=head1 Contributing

It is encouraged for people to port this to as many languages as makes sense.
Please fork this on GitHub:

    git@github.com:ingydotnet/pig-latin-acme

and send a pull request.

Here are the guidelines for contributing:

=over

=item * Add a C<< test-<lang> >> rule to the Makefile

=item * Add a C<< test/test.<lang-ext> >> test file

=item * Add a C<< lib/Pig/Latin.<lang-ext> >> module file

=item * Port as literally as you can

=over

=item * Code like a compiler not like a human expert

=item * That said, make the code as beautiful as a great compiler could do

=back

=item * Make tests pass with C<make test>

=item * Add yourself to L</Authors> section of C<doc/Pig/Latin.swim>

=over

=item * Run C<make doc> to regenerate the C<ReadMe.pod>

=back

=back

Don't worry about getting it perfect. Your code will be reviewed and tweaked
where needed/possible.

Even if your language doesn't seem like a great I<fit> for this, try it
anyway!

=head1 Language Features Exercised

Pig Latin translation was chosen because it is simple but not completely
trivial. The code exercises these language features:

=over

=item * Scripts

=over

=item * 

=back

=item * Libraries

=over

=item * load, use, require

=item * LIB path manipulation

=item * C<< lib/Pig/Latin.<language-extension> >> files

=back

=item * Classes

=over

=item * Methods

=item * Construction

=item * Attributes

=back

=item * Declaration

=item * Assignment

=item * Method calls

=item * Looping/Iteration

=item * Lambda Functions

=item * If/Else conditionals

=over

=item * Ternary assignment

=back

=item * Strings

=over

=item * String Standard Methods

=item * Substrings

=item * Split

=item * Concatentation

=item * Interpolation

=back

=item * Arrays

=over

=item * Array Indexing

=item * Array Standard Methods

=back

=item * Regular expression usage

=over

=item * Match operation

=item * Capture Groups

=back

=item * Exceptions

=item * I/O

=over

=item * Print to STDOUT

=item * println, say, puts (adds newline)

=back

=back

This seems like a decent subset to get a ball rolling.

=head1 Languages Supported So Far

=over

=item * Bash

=item * C++

=item * CafeScript

=item * CoffeeScript

=item * Go

=item * Lingy

=item * LiveScript

=item * Node.js

=item * Perl 5

=item * Perl 5 w/ Inline::CPP

=item * Perl 6

=item * PHP

=item * Python (2)

=item * Python 3

=item * Racket

=item * Ruby

=item * Scala

=item * Tcl

=back

=head1 Languages Desired (Pull Requests please!)

=over

=item * C#

=item * Clojure

=item * D

=item * Dylan

=item * Eiffel

=item * Erlang

=item * Groovy

=item * Haskell

=item * Java

=item * Lua

=item * Objective C

=item * Processing

=item * Prolog

=item * Scratch

=item * Smalltalk

=item * XSLT

=back

=head1 Strategy

=over

=item * Hand port the module to 15 - 20 languages

=over

=item * With working tests

=back

=item * Port the CafeScript to a Lingy/YAML AST

=item * Generate the target languages from the Lingy/YAML

=over

=item * Pass tests

=back

=item * Write a CafeScript compiler that can produce the YAML AST

=item * Make TestML suite pass in all languages

=item * Generate the language specific subdirs for packaging and release

=item * Automate everything from top level Makefile

=back

=head1 Authors

Written by:

=over

=item * Ingy döt Net <ingy@ingy.net>

=item * David Oswald <davido@cpan.org>

=back

=head1 Copyright & License

The MIT License (MIT)

Copyright 2014. Ingy döt Net.

=cut
